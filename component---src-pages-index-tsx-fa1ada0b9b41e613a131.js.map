{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.styles.ts","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx"],"names":["IndexPage","_ref","allMarkdownRemark","data","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_1__","title","edges","filter","edge","node","frontmatter","date","map","key","id","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","path","pageQuery","m","module","exports","require","default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","GlobalStyles","name","styles","Header","siteTitle","core_browser_esm","style","background","margin","gatsby_browser_entry","color","textDecoration","defaultProps","Layout","children","_856328897","react_default","a","Fragment","header","site","siteMetadata","Date","getFullYear","href","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat"],"mappings":"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","file":"component---src-pages-index-tsx-fa1ada0b9b41e613a131.js","sourcesContent":["\nimport SEO from \"../components/seo\"\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default function IndexPage({\n  data,\n}) {\n  const { allMarkdownRemark } = data // data.markdownRemark holds our post data\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <h1>Hi people</h1>\n      <p>Welcome to your new Gatsby blog with Markdown pages.</p>\n      {allMarkdownRemark.edges\n        .filter(edge => !!edge.node.frontmatter.date)\n        .map(edge =>\n          <div key={edge.node.id}>\n            <Link to={edge.node.frontmatter.path}>{edge.node.frontmatter.title}</Link>\n          </div>\n        )\n      }\n    </Layout>\n  )\n}\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { css } from \"@emotion/core\"\n\nexport const GlobalStyles = css`\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n\n}\nhtml {\n  font: 112.5%/1.45em georgia, serif;\n  box-sizing: border-box;\n  overflow-y: scroll;\n}\n* {\n  box-sizing: inherit;\n}\n*:before {\n  box-sizing: inherit;\n}\n*:after {\n  box-sizing: inherit;\n}\nbody {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: hsla(0, 0%, 0%, 0.8);\n  font-family: georgia, serif;\n  font-weight: normal;\n  word-wrap: break-word;\n  font-kerning: normal;\n  -moz-font-feature-settings: \"kern\", \"liga\", \"clig\", \"calt\";\n  -ms-font-feature-settings: \"kern\", \"liga\", \"clig\", \"calt\";\n  -webkit-font-feature-settings: \"kern\", \"liga\", \"clig\", \"calt\";\n  font-feature-settings: \"kern\", \"liga\", \"clig\", \"calt\";\n}\n`\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header style={{ background: `rebeccapurple` }}>\n    <div>\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Global } from \"@emotion/core\"\n\nimport { GlobalStyles } from './layout.styles'\n\nimport Header from \"./header\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Global\n        styles={GlobalStyles}\n      />\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </footer>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}