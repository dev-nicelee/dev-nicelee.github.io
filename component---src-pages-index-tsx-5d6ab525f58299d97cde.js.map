{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.styles.ts","webpack:///./src/components/Header/Header.styles.ts","webpack:///./src/components/Header/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx"],"names":["blogTitleLinkStyle","name","styles","IndexPage","_ref","allMarkdownRemark","data","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_1__","title","edges","filter","edge","node","frontmatter","date","map","key","id","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","path","css","pageQuery","m","module","exports","require","default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","mq","facepaint","bp","globalStyles","padding","headerStyle","Title","styled_base_browser_esm","target","siteTitleLinkStyle","Menu","MenuItem","Header","siteTitle","core_browser_esm","role","gatsby_browser_entry","style","flex","href","defaultProps","Layout","children","_856328897","react_default","a","Fragment","className","header","site","siteMetadata","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat"],"mappings":"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","file":"component---src-pages-index-tsx-5d6ab525f58299d97cde.js","sourcesContent":["\nimport SEO from \"../components/seo\"\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport { css } from '@emotion/core'\n\nexport const blogTitleLinkStyle = css`\n  color: #000;\n  font-size: 3vw;\n  font-weight: 600;\n`\n\nexport default function IndexPage({\n  data,\n}) {\n  const { allMarkdownRemark } = data // data.markdownRemark holds our post data\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      {allMarkdownRemark.edges\n        .filter(edge => !!edge.node.frontmatter.date)\n        .map(edge =>\n          <div key={edge.node.id}>\n            <Link \n              to={edge.node.frontmatter.path}\n              css={blogTitleLinkStyle}\n            >\n              {edge.node.frontmatter.title}\n            </Link>\n            <p>{edge.node.frontmatter.date}</p>\n          </div>\n        )\n      }\n    </Layout>\n  )\n}\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { css } from \"@emotion/core\"\nimport facepaint from 'facepaint'\n\nconst breakpoints = [576, 768, 992, 1200]\n\nconst mq = facepaint(\n  breakpoints.map(bp => `@media (min-width: ${bp}px)`)\n)\n\nexport const globalStyles = css`\n\nhtml {\n  box-sizing: border-box;\n  overflow-y: scroll;\n}\n* {\n  box-sizing: inherit;\n}\n*:before {\n  box-sizing: inherit;\n}\n*:after {\n  box-sizing: inherit;\n}\nbody {\n  margin: 0;\n  word-wrap: break-word;\n}\n\na {\n  box-shadow: none;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin-top: 1.82rem;\n}\n\n.page-wrapper {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\nmain {\n  flex: 1;\n}\n\n.gatsby-highlight {\n  pre {\n    border-radius: 5px;\n  }\n}\n\n:not(pre) > code[class*=\"language-\"] {\n  border-radius: 2px;\n  background-color: red;\n  color: #fff;\n}\n\n/* Adjust the position of the line numbers */\n.line-numbers-rows {\n  padding: 17px 0 17px 12px;\n}\n\n.blog-post {\n  ${mq({\n    padding: ['20px 10px', '10px 20px', '50px 100px', '50px 10%;']\n  })}\n}\n\n.posting-date {\n  color: rgba(0, 0, 0, 0.6);\n}\n`\n","import { css } from '@emotion/core'\nimport styled from '@emotion/styled'\n\nexport const headerStyle = css`\n  height: 9vw;\n  padding: 2vw;\n  display: flex;\n  align-items: center;\n`\n\nexport const Title = styled.div`\n  font-size: 3vw;\n  margin: 0;\n  flex: 1;\n  font-family: 'Merriweather Sans',sans-serif;\n`\n\nexport const siteTitleLinkStyle = css`\n  color: #000;\n`\n\nexport const Menu = styled.ul`\n  margin: 0;\n  display: flex;\n  align-items: center;\n  list-style: none;\n  justify-content: flex-end;\n  font-size: 2vw;\n  font-family: 'Merriweather Sans',sans-serif;\n`\n\nexport const MenuItem = styled.li`\n  margin: 0 0 0 1em;\n  padding: 0;\n\n  a {\n    color: rgb(127, 127, 127);\n  }\n\n  a:hover {\n    color: #000;\n    transition: color 200ms ease-out;\n  }\n`","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { headerStyle, Title, siteTitleLinkStyle, Menu, MenuItem } from \"./Header.styles\"\n\nconst Header = ({ siteTitle }) => (\n  <header role='navigation' css={headerStyle}>\n    <Title>\n      <Link\n        to=\"/\"\n        css={siteTitleLinkStyle}\n      >\n        {siteTitle}\n      </Link>\n    </Title>\n    <nav style={{ flex: 4 }}>\n      <Menu>\n        <MenuItem><a href=\"#\">About</a></MenuItem>\n        <MenuItem><a href=\"#\">Develoment</a></MenuItem>\n        <MenuItem><a href=\"#\">Contact</a></MenuItem>\n      </Menu>\n    </nav>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Global } from \"@emotion/core\"\n\nimport { globalStyles } from './layout.styles'\n\nimport Header from \"./Header/header\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Global\n        styles={globalStyles}\n      />\n      <div className='page-wrapper'>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <main style={{ \n          padding: '6vw'\n        }}>{children}</main>\n        <footer>\n          © dev-nicelee\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}